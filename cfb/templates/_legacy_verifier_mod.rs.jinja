{%- if mod.has_definitions() %}
  {%- for name, object in mod.objects.items() %}
    {%- if not object.IsStruct() %}

impl<'a> Verify for reader::{{ name }}<'a> {
    fn verify(&self) -> Result {
        let tab = self._tab;
        let buf = tab.buf;
        let buf_len = buf.len();

        if tab.loc + flatbuffers::SIZE_SOFFSET > buf_len {
            return Err(Error::OutOfBounds);
        }

        let vtab_loc = {
            let soffset_slice = &buf[tab.loc..tab.loc + flatbuffers::SIZE_SOFFSET];
            let soffset = flatbuffers::read_scalar::<flatbuffers::SOffsetT>(soffset_slice);
            (tab.loc as flatbuffers::SOffsetT - soffset) as usize
        };
        if vtab_loc + flatbuffers::SIZE_VOFFSET + flatbuffers::SIZE_VOFFSET > buf_len {
            return Err(Error::OutOfBounds);
        }

        let vtab = tab.vtable();
        let vtab_num_bytes = vtab.num_bytes();
        if vtab_loc + vtab_num_bytes > buf_len {
            return Err(Error::OutOfBounds);
        }
        let object_inline_num_bytes = vtab.object_inline_num_bytes();
        if tab.loc + object_inline_num_bytes > buf_len {
            return Err(Error::OutOfBounds);
        }
        for i in 0..vtab.num_fields() {
            let voffset = vtab.get_field(i) as usize;
            if voffset < flatbuffers::SIZE_SOFFSET || voffset >= object_inline_num_bytes {
                return Err(Error::OutOfBounds);
            }
        }
      {%- for field in cfb.fields_sorted_by_offset(object) %}
        if Self::VT_{{ cfb.field_name(field) | upper }} as usize + flatbuffers::SIZE_VOFFSET <= vtab_num_bytes {
            let voffset = vtab.get(Self::VT_{{ cfb.field_name(field) | upper }}) as usize;
            if voffset > 0 {
                if voffset + {{ cfb.field_size(field) }} > object_inline_num_bytes {
                    return Err(Error::OutOfBounds);
                }
        {%- if cfb.is_table(field) %}
                if let Some(f) = self.{{ cfb.field_name(field) }}() {
                    f.verify()?;
                }
        {%- elif cfb.is_string(field) %}
                {
                    let offset_loc = tab.loc + voffset;
                    let loc = offset_loc
                        + flatbuffers::read_scalar::<flatbuffers::UOffsetT>(&buf[offset_loc..])
                            as usize;
                    if loc + flatbuffers::SIZE_UOFFSET > buf_len {
                        return Err(Error::OutOfBounds);
                    }
                    let len =
                        flatbuffers::read_scalar::<flatbuffers::UOffsetT>(&buf[loc..]) as usize;
                    if loc + flatbuffers::SIZE_UOFFSET + len + 1 > buf_len {
                        return Err(Error::OutOfBounds);
                    }
                    if buf[loc + flatbuffers::SIZE_UOFFSET + len] != 0 {
                        return Err(Error::NonNullTerminatedString);
                    }
                }
        {%- endif %}
            }
        }
      {%- endfor %}

        Ok(())
    }
}
    {%- endif %}
  {%- endfor %}
{%- endif %}

{%- for name, mod in mod.children.items() %}
  {%- set mod_content %}
    {%- include "_legacy_verifier_mod.rs.jinja" %}
  {%- endset %}
pub mod {{ name }} {
    #![allow(unused_imports)]

    use super::reader::{{ name }} as reader;
    pub use super::{Error, Result, Verify};
    use flatbuffers;
    {{- mod_content | indent }}
}
{% endfor %}
