// automatically generated by the FlatBuffers compiler, do not modify


pub enum T1Offset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct T1<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for T1<'a> {
    type Inner = T1<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> T1<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        T1 {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args T1Args<'args>) -> flatbuffers::WIPOffset<T1<'bldr>> {
      let mut builder = T1Builder::new(_fbb);
      builder.add_f1(args.f1);
      if let Some(x) = args.f4 { builder.add_f4(x); }
      if let Some(x) = args.s3 { builder.add_s3(x); }
      if let Some(x) = args.f3 { builder.add_f3(x); }
      if let Some(x) = args.s2 { builder.add_s2(x); }
      if let Some(x) = args.f2 { builder.add_f2(x); }
      if let Some(x) = args.s1 { builder.add_s1(x); }
      builder.finish()
    }

    pub const VT_F1: flatbuffers::VOffsetT = 4;
    pub const VT_S1: flatbuffers::VOffsetT = 6;
    pub const VT_F2: flatbuffers::VOffsetT = 8;
    pub const VT_S2: flatbuffers::VOffsetT = 10;
    pub const VT_F3: flatbuffers::VOffsetT = 12;
    pub const VT_S3: flatbuffers::VOffsetT = 14;
    pub const VT_F4: flatbuffers::VOffsetT = 16;

  #[inline]
  pub fn f1(&self) -> u64 {
    self._tab.get::<u64>(T1::VT_F1, Some(0)).unwrap()
  }
  #[inline]
  pub fn s1(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(T1::VT_S1, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn f2(&self) -> Option<T2<'a>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<T2<'a>>>(T1::VT_F2, None)
  }
  #[inline]
  pub fn s2(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(T1::VT_S2, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn f3(&self) -> Option<flatbuffers::Vector<'a, u64>> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u64>>>(T1::VT_F3, None)
  }
  #[inline]
  pub fn s3(&self) -> Option<&'a [u8]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, u8>>>(T1::VT_S3, None).map(|v| v.safe_slice())
  }
  #[inline]
  pub fn f4(&self) -> Option<&'a str> {
    self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(T1::VT_F4, None)
  }
}

pub struct T1Args<'a> {
    pub f1: u64,
    pub s1: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub f2: Option<flatbuffers::WIPOffset<T2<'a >>>,
    pub s2: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub f3: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u64>>>,
    pub s3: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a ,  u8>>>,
    pub f4: Option<flatbuffers::WIPOffset<&'a  str>>,
}
impl<'a> Default for T1Args<'a> {
    #[inline]
    fn default() -> Self {
        T1Args {
            f1: 0,
            s1: None,
            f2: None,
            s2: None,
            f3: None,
            s3: None,
            f4: None,
        }
    }
}
pub struct T1Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> T1Builder<'a, 'b> {
  #[inline]
  pub fn add_f1(&mut self, f1: u64) {
    self.fbb_.push_slot::<u64>(T1::VT_F1, f1, 0);
  }
  #[inline]
  pub fn add_s1(&mut self, s1: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(T1::VT_S1, s1);
  }
  #[inline]
  pub fn add_f2(&mut self, f2: flatbuffers::WIPOffset<T2<'b >>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<T2>>(T1::VT_F2, f2);
  }
  #[inline]
  pub fn add_s2(&mut self, s2: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(T1::VT_S2, s2);
  }
  #[inline]
  pub fn add_f3(&mut self, f3: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u64>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(T1::VT_F3, f3);
  }
  #[inline]
  pub fn add_s3(&mut self, s3: flatbuffers::WIPOffset<flatbuffers::Vector<'b , u8>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(T1::VT_S3, s3);
  }
  #[inline]
  pub fn add_f4(&mut self, f4: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(T1::VT_F4, f4);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> T1Builder<'a, 'b> {
    let start = _fbb.start_table();
    T1Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<T1<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

pub enum T2Offset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct T2<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for T2<'a> {
    type Inner = T2<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> T2<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        T2 {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args T2Args) -> flatbuffers::WIPOffset<T2<'bldr>> {
      let mut builder = T2Builder::new(_fbb);
      builder.add_f1(args.f1);
      builder.finish()
    }

    pub const VT_F1: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn f1(&self) -> u8 {
    self._tab.get::<u8>(T2::VT_F1, Some(0)).unwrap()
  }
}

pub struct T2Args {
    pub f1: u8,
}
impl<'a> Default for T2Args {
    #[inline]
    fn default() -> Self {
        T2Args {
            f1: 0,
        }
    }
}
pub struct T2Builder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> T2Builder<'a, 'b> {
  #[inline]
  pub fn add_f1(&mut self, f1: u8) {
    self.fbb_.push_slot::<u8>(T2::VT_F1, f1, 0);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> T2Builder<'a, 'b> {
    let start = _fbb.start_table();
    T2Builder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<T2<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

#[inline]
pub fn get_root_as_t1<'a>(buf: &'a [u8]) -> T1<'a> {
  flatbuffers::get_root::<T1<'a>>(buf)
}

#[inline]
pub fn get_size_prefixed_root_as_t1<'a>(buf: &'a [u8]) -> T1<'a> {
  flatbuffers::get_size_prefixed_root::<T1<'a>>(buf)
}

#[inline]
pub fn finish_t1_buffer<'a, 'b>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>,
    root: flatbuffers::WIPOffset<T1<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_t1_buffer<'a, 'b>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>, root: flatbuffers::WIPOffset<T1<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
