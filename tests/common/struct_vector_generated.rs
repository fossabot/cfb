// automatically generated by the FlatBuffers compiler, do not modify


pub mod example {
  #![allow(dead_code)]
  #![allow(unused_imports)]

  use std::mem;
  use std::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::EndianScalar;

// struct Stat, aligned to 4
#[repr(C, align(4))]
#[derive(Clone, Copy, Debug, PartialEq)]
pub struct Stat {
  hp_: u32,
  mp_: u8,
  padding0__: u8,  padding1__: u16,
} // pub struct Stat
impl flatbuffers::SafeSliceAccess for Stat {}
impl<'a> flatbuffers::Follow<'a> for Stat {
  type Inner = &'a Stat;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Stat>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Stat {
  type Inner = &'a Stat;
  #[inline]
  fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Stat>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Stat {
    type Output = Stat;
    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(self as *const Stat as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}
impl<'b> flatbuffers::Push for &'b Stat {
    type Output = Stat;

    #[inline]
    fn push(&self, dst: &mut [u8], _rest: &[u8]) {
        let src = unsafe {
            ::std::slice::from_raw_parts(*self as *const Stat as *const u8, Self::size())
        };
        dst.copy_from_slice(src);
    }
}


impl Stat {
  pub fn new<'a>(_hp: u32, _mp: u8) -> Self {
    Stat {
      hp_: _hp.to_little_endian(),
      mp_: _mp.to_little_endian(),

      padding0__: 0,padding1__: 0,
    }
  }
  pub fn hp<'a>(&'a self) -> u32 {
    self.hp_.from_little_endian()
  }
  pub fn mp<'a>(&'a self) -> u8 {
    self.mp_.from_little_endian()
  }
}

pub enum HeroOffset {}
#[derive(Copy, Clone, Debug, PartialEq)]

pub struct Hero<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for Hero<'a> {
    type Inner = Hero<'a>;
    #[inline]
    fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
        Self {
            _tab: flatbuffers::Table { buf: buf, loc: loc },
        }
    }
}

impl<'a> Hero<'a> {
    #[inline]
    pub fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
        Hero {
            _tab: table,
        }
    }
    #[allow(unused_mut)]
    pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr>(
        _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr>,
        args: &'args HeroArgs<'args>) -> flatbuffers::WIPOffset<Hero<'bldr>> {
      let mut builder = HeroBuilder::new(_fbb);
      if let Some(x) = args.stats { builder.add_stats(x); }
      builder.finish()
    }

    pub const VT_STATS: flatbuffers::VOffsetT = 4;

  #[inline]
  pub fn stats(&self) -> Option<&'a [Stat]> {
    self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<Stat>>>(Hero::VT_STATS, None).map(|v| v.safe_slice() )
  }
}

pub struct HeroArgs<'a> {
    pub stats: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a , Stat>>>,
}
impl<'a> Default for HeroArgs<'a> {
    #[inline]
    fn default() -> Self {
        HeroArgs {
            stats: None,
        }
    }
}
pub struct HeroBuilder<'a: 'b, 'b> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b> HeroBuilder<'a, 'b> {
  #[inline]
  pub fn add_stats(&mut self, stats: flatbuffers::WIPOffset<flatbuffers::Vector<'b , Stat>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(Hero::VT_STATS, stats);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a>) -> HeroBuilder<'a, 'b> {
    let start = _fbb.start_table();
    HeroBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<Hero<'a>> {
    let o = self.fbb_.end_table(self.start_);
    flatbuffers::WIPOffset::new(o.value())
  }
}

}  // pub mod example

